using FftSharp;
using NAudio.Wave;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace psktest;
public partial class FormEncode : Form
{
    public FormEncode()
    {
        InitializeComponent();
        //rtbMessage.Text = "0000000000The Quick Brown Fox Jumps Over The Lazy Dog 1234567890 Times!1111111111";
        //rtbMessage.Text = "test123 test123";
    }

    private void btnUpdate_Click(object sender, EventArgs e)
    {
        string testMessage
        bool[] messageBits = testMessage.ToArray().Select(x => x == '1').ToArray();

        double[] wave = MakeSound(messageBits);

        byte[] waveBytes = new byte[wave.Length * 2];
        for (int i = 0; i < wave.Length; i++)
        {
            byte[] values = BitConverter.GetBytes((Int16)(wave[i] * 30));
            waveBytes[i * 2] = values[1];
            waveBytes[i * 2 + 1] = values[0];
        }

        WaveFormat wavFormat = new(8000, 16, 1);
        MemoryStream wavMemoryStream = new(waveBytes);
        RawSourceWaveStream wavStream = new(wavMemoryStream, wavFormat);
        WaveOutEvent output = new();
        output.Init(wavStream);
        output.Play();

        formsPlot1.Plot.Clear();
        formsPlot1.Plot.AddSignal(wave, 8000);
        formsPlot1.Refresh();
    }

    private double[] MakeSound(bool[] bits)
    {
        int SampleRate = 8_000;
        double carrierFreq = 1000;
        double chirpsPerSecond = 31.25;
        int chirpSamples = (int)(SampleRate / chirpsPerSecond); // 256
        double[] wave = new double[chirpSamples * bits.Length];

        var windowFunc = new FftSharp.Windows.Cosine();

        double[] window = windowFunc.Create(chirpSamples);
        double[] windowStrongStart = windowFunc.Create(chirpSamples);
        double[] windowStrongEnd = windowFunc.Create(chirpSamples);
        double[] windowStrongBoth = windowFunc.Create(chirpSamples);

        for (int i = 0; i < window.Length / 2; i++)
        {
            windowStrongStart[i] = 1;
            windowStrongBoth[i] = 1;
        }

        for (int i = window.Length / 2; i < window.Length; i++)
        {
            windowStrongEnd[i] = 1;
            windowStrongBoth[i] = 1;
        }

        for (int i = 0; i < bits.Length; i++)
        {
            bool strongStart = (i > 0 && bits[i - 1] == bits[i]);
            bool strongEnd = (i < bits.Length - 1 && bits[i + 1] == bits[i]);

            double[] thisWindow;
            if (strongStart && strongEnd)
            {
                thisWindow = windowStrongBoth;
            }
            else if (strongStart)
            {
                thisWindow = windowStrongStart;
            }
            else if (strongEnd)
            {
                thisWindow = windowStrongEnd;
            }
            else
            {
                thisWindow = window;
            }

            int startIndex = i * chirpSamples;
            for (int j = 0; j < chirpSamples; j++)
            {
                int thisIndex = startIndex + j;
                double thisTime = (double)thisIndex / SampleRate;

                wave[startIndex + j] = Math.Cos(thisTime * carrierFreq * 2 * Math.PI) * thisWindow[j];

                if (!bits[i])
                {
                    wave[startIndex + j] = -wave[startIndex + j];
                }
            }
        }

        return wave;
    }
}
